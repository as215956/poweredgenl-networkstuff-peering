{% macro export_features() %}
        if ! is_acceptable_size() then {
            reject;
        }
        else if ((200132, 2, peerasn) ~ bgp_large_community || (200132, 2, 0) ~ bgp_large_community) then {
            bgp_path.prepend(200132);
        }
        else if ((200132, 3, peerasn) ~ bgp_large_community || (200132, 3, 0) ~ bgp_large_community) then {
            bgp_path.prepend(200132);
            bgp_path.prepend(200132);
        }

        if (graceful_shutdown = 1) then {
            # enable the graceful shutdown community
            bgp_community.add((65535, 0));
        }

        if (   (200132, 4, peerasn) ~ bgp_large_community
            || (200132, 4, 0) ~ bgp_large_community
            || (200132, 303, 0) ~ bgp_large_community
           ) then {
            reject;
        }
{% endmacro %}

function allow_graceful_shutdown() {
    if (65535, 0) ~ bgp_community then {
        bgp_local_pref = 0;
    }
}

function ebgp_peering_export(int peerasn; int graceful_shutdown) {
    if ( is_netone_supernet()
        || is_netone_beacon()
        || (200132, 0, 2) ~ bgp_large_community
        ) then {

        bgp_path.delete([64512..65534]);

        {{ export_features() }}
        accept;
    }
    reject;
}

function full_table_export(int peerasn; int graceful_shutdown) {
    if ( is_netone_supernet() ) then accept;
    else if ( is_netone_more_specific() ) then {
        reject;
    }
    else if ( is_bogon() ) then reject;
    else if ( bgp_path.last = 200132 ) then reject;
    else {
        {{ export_features () }}
        accept;
    }
}

/*
    This filter is used for peers for which
    we cannot do strict IRR filtering
*/
filter ebgp_unfiltered_peering_import
prefix set acceptable_sizes;
{
    # https://tools.ietf.org/html/draft-ietf-grow-bgp-gshut-06
    allow_graceful_shutdown();

    # Scrub communities from peering partners
    bgp_community.delete((65535, 666));
    bgp_large_community.delete([(200132, *, *)]);

    if is_bogon_aspath() then {
        print "Reject: bogon AS_PATH: ", net, " ", bgp_path, " protocol: ", proto;
        bgp_large_community.add((200132, rejected_route, r_bogon_aspath));
        reject;
    }

    if ( is_netone_more_specific() ) then {
        bgp_large_community.add((200132, rejected_route, r_netone_morespecific));
        reject;
    }
    if ( is_bogon() ) then {
        bgp_large_community.add((200132, rejected_route, r_bogon_prefix));
        reject;
    }

{% if rpki.validation %}
    reject_rpki_invalid();
{% endif %}

    if is_acceptable_size() then {
        bgp_med = 0;
        bgp_large_community.add((200132, 0, 1));
        accept;
    }
    bgp_large_community.add((200132, rejected_route, r_unacceptable_pfxlen));
    reject;
}
